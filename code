{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9y2r1hUBcOX6",
        "outputId": "51529cba-a5d6-4fef-fc5b-55392271c8bb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing installation: librosa 0.10.1\n",
            "Uninstalling librosa-0.10.1:\n",
            "  Successfully uninstalled librosa-0.10.1\n",
            "\u001b[33mWARNING: Skipping resampy as it is not installed.\u001b[0m\u001b[33m\n",
            "\u001b[0mCollecting librosa\n",
            "  Downloading librosa-0.10.1-py3-none-any.whl (253 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m253.7/253.7 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting resampy\n",
            "  Downloading resampy-0.4.3-py3-none-any.whl (3.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa) (3.0.1)\n",
            "Requirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.2.2)\n",
            "Requirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.3.2)\n",
            "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.4.2)\n",
            "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.58.1)\n",
            "Requirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.12.1)\n",
            "Requirement already satisfied: pooch>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.8.1)\n",
            "Requirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.3.7)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.10.0)\n",
            "Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.3)\n",
            "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.0.8)\n",
            "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa) (0.41.1)\n",
            "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.0->librosa) (4.2.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.0->librosa) (24.0)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.0->librosa) (2.31.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa) (3.3.0)\n",
            "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa) (1.16.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.21)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.0->librosa) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.0->librosa) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.0->librosa) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.0->librosa) (2024.2.2)\n",
            "Installing collected packages: resampy, librosa\n",
            "Successfully installed librosa-0.10.1 resampy-0.4.3\n"
          ]
        }
      ],
      "source": [
        "!pip uninstall -y librosa resampy\n",
        "!pip install librosa resampy"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ch3n-A3qyK9W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import librosa\n",
        "import os"
      ],
      "metadata": {
        "id": "AtHGoGarfyVU"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install py7zr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "zlgT6hjeciTG",
        "outputId": "bf9f0e1f-bfbc-422b-d11c-a8b2df55f76f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting py7zr\n",
            "  Downloading py7zr-0.21.0-py3-none-any.whl (67 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/67.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.6/67.6 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting texttable (from py7zr)\n",
            "  Downloading texttable-1.7.0-py2.py3-none-any.whl (10 kB)\n",
            "Collecting pycryptodomex>=3.16.0 (from py7zr)\n",
            "  Downloading pycryptodomex-3.20.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m14.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pyzstd>=0.15.9 (from py7zr)\n",
            "  Downloading pyzstd-0.15.10-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (411 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m411.2/411.2 kB\u001b[0m \u001b[31m21.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pyppmd<1.2.0,>=1.1.0 (from py7zr)\n",
            "  Downloading pyppmd-1.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (138 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m138.9/138.9 kB\u001b[0m \u001b[31m20.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pybcj<1.1.0,>=1.0.0 (from py7zr)\n",
            "  Downloading pybcj-1.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (49 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.7/49.7 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting multivolumefile>=0.2.3 (from py7zr)\n",
            "  Downloading multivolumefile-0.2.3-py3-none-any.whl (17 kB)\n",
            "Collecting inflate64<1.1.0,>=1.0.0 (from py7zr)\n",
            "  Downloading inflate64-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (93 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m93.1/93.1 kB\u001b[0m \u001b[31m14.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting brotli>=1.1.0 (from py7zr)\n",
            "  Downloading Brotli-1.1.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m29.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from py7zr) (5.9.5)\n",
            "Installing collected packages: texttable, brotli, pyzstd, pyppmd, pycryptodomex, pybcj, multivolumefile, inflate64, py7zr\n",
            "Successfully installed brotli-1.1.0 inflate64-1.0.0 multivolumefile-0.2.3 py7zr-0.21.0 pybcj-1.0.2 pycryptodomex-3.20.0 pyppmd-1.1.0 pyzstd-0.15.10 texttable-1.7.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import py7zr\n",
        "import os\n",
        "# Path to your .7z file\n",
        "file_path = '/content/samples.7z'\n",
        "extracted_dir = '/content'\n",
        "os.makedirs(extracted_dir, exist_ok=True)\n",
        "with py7zr.SevenZipFile(file_path, mode='r') as z:\n",
        "    z.extractall(path=extracted_dir)\n",
        "print(\"Extraction completed.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "sPWjT7WifzsK",
        "outputId": "5c16a139-9ae7-44f5-9911-675189257b04"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extraction completed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def load_data(test_size=0.2, chunk_duration=1):\n",
        "    x, y = [], []\n",
        "    for file in os.listdir('/content/samples'):\n",
        "        audio, sample_rate = librosa.load('/content/samples/' + file, res_type='kaiser_fast')\n",
        "        num_chunks = int(np.ceil(len(audio) / (sample_rate * chunk_duration)))\n",
        "        for i in range(num_chunks):\n",
        "            start = int(i * sample_rate * chunk_duration)\n",
        "            end = min(len(audio), int((i + 1) * sample_rate * chunk_duration))\n",
        "            chunk_audio = audio[start:end]\n",
        "            feature = extract_features_from_audio(chunk_audio, sample_rate)\n",
        "            x.append(feature)\n",
        "            class_label = file.split('(')[0]\n",
        "            y.append(class_label)\n",
        "    encoder = LabelEncoder()\n",
        "    y = encoder.fit_transform(y)\n",
        "    return train_test_split(np.array(x), y, test_size=test_size, random_state=42)\n",
        "\n"
      ],
      "metadata": {
        "id": "S8BB9_NRgO05"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_features_from_audio(audio, sample_rate, mfcc=True, chroma=True, mel=True):\n",
        "    result = np.array([])\n",
        "    if mfcc:\n",
        "        mfccs = np.mean(librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40, n_fft=1024).T, axis=0)  # Adjust n_fft\n",
        "        result = np.hstack((result, mfccs))\n",
        "    if chroma:\n",
        "        stft = np.abs(librosa.stft(audio, n_fft=1024))  # Adjust n_fft\n",
        "        chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T, axis=0)\n",
        "        result = np.hstack((result, chroma))\n",
        "    if mel:\n",
        "        mel = np.mean(librosa.feature.melspectrogram(y=audio, sr=sample_rate, n_fft=1024).T, axis=0)  # Adjust n_fft\n",
        "        result = np.hstack((result, mel))\n",
        "    return result\n"
      ],
      "metadata": {
        "id": "d-NzO6nsggFI"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import layers, models\n",
        "from tensorflow.keras.layers import Dropout\n",
        "def create_model_with_dropout(input_shape, num_classes, dropout_rate=0.5):\n",
        "    model = models.Sequential()\n",
        "    model.add(layers.Conv1D(32, 3, activation='relu', input_shape=input_shape))\n",
        "    model.add(layers.MaxPooling1D(2))\n",
        "    model.add(layers.Conv1D(64, 3, activation='relu'))\n",
        "    model.add(layers.MaxPooling1D(2))\n",
        "    model.add(layers.Conv1D(128, 3, activation='relu'))\n",
        "    model.add(layers.MaxPooling1D(2))\n",
        "    model.add(layers.Conv1D(128, 3, activation='relu'))\n",
        "    model.add(layers.MaxPooling1D(2))\n",
        "    model.add(layers.Flatten())\n",
        "    model.add(layers.Dense(512, activation='relu'))\n",
        "    model.add(Dropout(dropout_rate))\n",
        "    model.add(layers.Dense(num_classes, activation='softmax'))\n",
        "    return model\n",
        "X_train, X_test, y_train, y_test = load_data(test_size=0.2)\n",
        "input_shape = (X_train.shape[1], 1)\n",
        "num_classes = 4\n",
        "model_with_dropout = create_model_with_dropout(input_shape=(X_train.shape[1], 1), num_classes=num_classes)\n",
        "model_with_dropout.compile(optimizer='adam',\n",
        "                           loss='sparse_categorical_crossentropy',\n",
        "                           metrics=['accuracy'])\n",
        "model_with_dropout.summary()\n",
        "model_with_dropout.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "test_loss, test_acc = model_with_dropout.evaluate(X_test, y_test)\n",
        "print('Test accuracy:', test_acc)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "QxWK1dGigmgN",
        "outputId": "14207c3c-1fae-4fb1-c3ad-892f09031812"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/librosa/core/spectrum.py:257: UserWarning: n_fft=1024 is too large for input signal of length=70\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv1d (Conv1D)             (None, 178, 32)           128       \n",
            "                                                                 \n",
            " max_pooling1d (MaxPooling1  (None, 89, 32)            0         \n",
            " D)                                                              \n",
            "                                                                 \n",
            " conv1d_1 (Conv1D)           (None, 87, 64)            6208      \n",
            "                                                                 \n",
            " max_pooling1d_1 (MaxPoolin  (None, 43, 64)            0         \n",
            " g1D)                                                            \n",
            "                                                                 \n",
            " conv1d_2 (Conv1D)           (None, 41, 128)           24704     \n",
            "                                                                 \n",
            " max_pooling1d_2 (MaxPoolin  (None, 20, 128)           0         \n",
            " g1D)                                                            \n",
            "                                                                 \n",
            " conv1d_3 (Conv1D)           (None, 18, 128)           49280     \n",
            "                                                                 \n",
            " max_pooling1d_3 (MaxPoolin  (None, 9, 128)            0         \n",
            " g1D)                                                            \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 1152)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 512)               590336    \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 512)               0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 4)                 2052      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 672708 (2.57 MB)\n",
            "Trainable params: 672708 (2.57 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n",
            "Epoch 1/50\n",
            "16/16 [==============================] - 7s 51ms/step - loss: 1.3290 - accuracy: 0.3780 - val_loss: 1.1453 - val_accuracy: 0.4127\n",
            "Epoch 2/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 1.0913 - accuracy: 0.5140 - val_loss: 1.0175 - val_accuracy: 0.5714\n",
            "Epoch 3/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.9540 - accuracy: 0.6160 - val_loss: 0.9033 - val_accuracy: 0.5635\n",
            "Epoch 4/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.7874 - accuracy: 0.6840 - val_loss: 0.8326 - val_accuracy: 0.5952\n",
            "Epoch 5/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.6994 - accuracy: 0.6760 - val_loss: 0.8002 - val_accuracy: 0.6746\n",
            "Epoch 6/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.6389 - accuracy: 0.7360 - val_loss: 0.6751 - val_accuracy: 0.7143\n",
            "Epoch 7/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.5637 - accuracy: 0.7800 - val_loss: 0.6442 - val_accuracy: 0.7460\n",
            "Epoch 8/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.5243 - accuracy: 0.7620 - val_loss: 0.6707 - val_accuracy: 0.6984\n",
            "Epoch 9/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.4947 - accuracy: 0.8020 - val_loss: 0.6675 - val_accuracy: 0.7460\n",
            "Epoch 10/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.4326 - accuracy: 0.8460 - val_loss: 0.5245 - val_accuracy: 0.7937\n",
            "Epoch 11/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.4075 - accuracy: 0.8320 - val_loss: 0.5555 - val_accuracy: 0.7143\n",
            "Epoch 12/50\n",
            "16/16 [==============================] - 0s 6ms/step - loss: 0.3050 - accuracy: 0.8800 - val_loss: 0.5439 - val_accuracy: 0.8492\n",
            "Epoch 13/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.2708 - accuracy: 0.9000 - val_loss: 0.5448 - val_accuracy: 0.7540\n",
            "Epoch 14/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.2666 - accuracy: 0.8940 - val_loss: 0.5301 - val_accuracy: 0.7698\n",
            "Epoch 15/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.2889 - accuracy: 0.8800 - val_loss: 0.5668 - val_accuracy: 0.7857\n",
            "Epoch 16/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.2646 - accuracy: 0.9000 - val_loss: 0.5510 - val_accuracy: 0.7619\n",
            "Epoch 17/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.2398 - accuracy: 0.9100 - val_loss: 0.4996 - val_accuracy: 0.8095\n",
            "Epoch 18/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1955 - accuracy: 0.9300 - val_loss: 0.5000 - val_accuracy: 0.8175\n",
            "Epoch 19/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1447 - accuracy: 0.9560 - val_loss: 0.4726 - val_accuracy: 0.8254\n",
            "Epoch 20/50\n",
            "16/16 [==============================] - 0s 6ms/step - loss: 0.1435 - accuracy: 0.9500 - val_loss: 0.5663 - val_accuracy: 0.8333\n",
            "Epoch 21/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1595 - accuracy: 0.9260 - val_loss: 0.4614 - val_accuracy: 0.8492\n",
            "Epoch 22/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1620 - accuracy: 0.9500 - val_loss: 0.6167 - val_accuracy: 0.8175\n",
            "Epoch 23/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1405 - accuracy: 0.9380 - val_loss: 0.3703 - val_accuracy: 0.8651\n",
            "Epoch 24/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1473 - accuracy: 0.9440 - val_loss: 0.7253 - val_accuracy: 0.7698\n",
            "Epoch 25/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.1273 - accuracy: 0.9580 - val_loss: 0.5863 - val_accuracy: 0.8254\n",
            "Epoch 26/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0900 - accuracy: 0.9640 - val_loss: 0.5478 - val_accuracy: 0.8254\n",
            "Epoch 27/50\n",
            "16/16 [==============================] - 0s 6ms/step - loss: 0.0848 - accuracy: 0.9740 - val_loss: 0.6166 - val_accuracy: 0.8175\n",
            "Epoch 28/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0756 - accuracy: 0.9780 - val_loss: 0.5595 - val_accuracy: 0.8175\n",
            "Epoch 29/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0628 - accuracy: 0.9780 - val_loss: 0.6153 - val_accuracy: 0.8333\n",
            "Epoch 30/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0611 - accuracy: 0.9780 - val_loss: 0.6836 - val_accuracy: 0.8413\n",
            "Epoch 31/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0498 - accuracy: 0.9860 - val_loss: 0.6129 - val_accuracy: 0.8413\n",
            "Epoch 32/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0549 - accuracy: 0.9820 - val_loss: 0.5745 - val_accuracy: 0.8413\n",
            "Epoch 33/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0570 - accuracy: 0.9840 - val_loss: 0.6558 - val_accuracy: 0.8254\n",
            "Epoch 34/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0506 - accuracy: 0.9760 - val_loss: 0.7236 - val_accuracy: 0.8413\n",
            "Epoch 35/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0399 - accuracy: 0.9900 - val_loss: 0.6113 - val_accuracy: 0.8413\n",
            "Epoch 36/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0610 - accuracy: 0.9820 - val_loss: 0.4815 - val_accuracy: 0.8571\n",
            "Epoch 37/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0431 - accuracy: 0.9840 - val_loss: 0.5996 - val_accuracy: 0.8413\n",
            "Epoch 38/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0535 - accuracy: 0.9780 - val_loss: 0.6624 - val_accuracy: 0.8254\n",
            "Epoch 39/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0474 - accuracy: 0.9840 - val_loss: 0.6634 - val_accuracy: 0.8333\n",
            "Epoch 40/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0612 - accuracy: 0.9780 - val_loss: 0.8232 - val_accuracy: 0.8095\n",
            "Epoch 41/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0498 - accuracy: 0.9840 - val_loss: 0.5920 - val_accuracy: 0.8254\n",
            "Epoch 42/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0443 - accuracy: 0.9780 - val_loss: 0.7317 - val_accuracy: 0.8016\n",
            "Epoch 43/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0311 - accuracy: 0.9880 - val_loss: 0.6362 - val_accuracy: 0.8254\n",
            "Epoch 44/50\n",
            "16/16 [==============================] - 0s 11ms/step - loss: 0.0343 - accuracy: 0.9840 - val_loss: 0.6946 - val_accuracy: 0.8254\n",
            "Epoch 45/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0409 - accuracy: 0.9800 - val_loss: 0.8006 - val_accuracy: 0.8175\n",
            "Epoch 46/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0264 - accuracy: 0.9880 - val_loss: 0.6045 - val_accuracy: 0.8571\n",
            "Epoch 47/50\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0345 - accuracy: 0.9820 - val_loss: 0.7372 - val_accuracy: 0.8413\n",
            "Epoch 48/50\n",
            "16/16 [==============================] - 0s 11ms/step - loss: 0.0397 - accuracy: 0.9840 - val_loss: 0.7391 - val_accuracy: 0.8333\n",
            "Epoch 49/50\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0273 - accuracy: 0.9940 - val_loss: 0.5656 - val_accuracy: 0.8492\n",
            "Epoch 50/50\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0425 - accuracy: 0.9860 - val_loss: 0.9562 - val_accuracy: 0.8016\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 0.9562 - accuracy: 0.8016\n",
            "Test accuracy: 0.8015872836112976\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "\n",
        "# Predict the probabilities for each class for the test data\n",
        "y_pred_probabilities = model_with_dropout.predict(X_test)\n",
        "\n",
        "# Get the predicted class labels\n",
        "y_pred = np.argmax(y_pred_probabilities, axis=1)\n",
        "\n",
        "# Generate the confusion matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Display the confusion matrix\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=np.unique(y_test))\n",
        "disp.plot()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "KHqiMqvDx9NK",
        "outputId": "05520d80-754c-4a06-e447-666c0d78f443"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 [==============================] - 0s 6ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "history = model_with_dropout.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "nGwVHVtiyORP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2273
        },
        "outputId": "ae474158-05e8-4ab2-b0eb-053b4b97bc0d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "16/16 [==============================] - 0s 31ms/step - loss: 0.0245 - accuracy: 0.9880 - val_loss: 0.7211 - val_accuracy: 0.8333\n",
            "Epoch 2/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0274 - accuracy: 0.9800 - val_loss: 0.7435 - val_accuracy: 0.8333\n",
            "Epoch 3/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0194 - accuracy: 0.9860 - val_loss: 0.7342 - val_accuracy: 0.8333\n",
            "Epoch 4/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0312 - accuracy: 0.9800 - val_loss: 0.6485 - val_accuracy: 0.8413\n",
            "Epoch 5/50\n",
            "16/16 [==============================] - 0s 23ms/step - loss: 0.0289 - accuracy: 0.9840 - val_loss: 0.6919 - val_accuracy: 0.8175\n",
            "Epoch 6/50\n",
            "16/16 [==============================] - 0s 20ms/step - loss: 0.0246 - accuracy: 0.9880 - val_loss: 0.6296 - val_accuracy: 0.8651\n",
            "Epoch 7/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0286 - accuracy: 0.9880 - val_loss: 0.7827 - val_accuracy: 0.8254\n",
            "Epoch 8/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0335 - accuracy: 0.9820 - val_loss: 0.6827 - val_accuracy: 0.8413\n",
            "Epoch 9/50\n",
            "16/16 [==============================] - 0s 12ms/step - loss: 0.0219 - accuracy: 0.9900 - val_loss: 0.7614 - val_accuracy: 0.8492\n",
            "Epoch 10/50\n",
            "16/16 [==============================] - 0s 15ms/step - loss: 0.0195 - accuracy: 0.9920 - val_loss: 0.7087 - val_accuracy: 0.8254\n",
            "Epoch 11/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0206 - accuracy: 0.9880 - val_loss: 0.7210 - val_accuracy: 0.8333\n",
            "Epoch 12/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0199 - accuracy: 0.9880 - val_loss: 0.7013 - val_accuracy: 0.8333\n",
            "Epoch 13/50\n",
            "16/16 [==============================] - 0s 15ms/step - loss: 0.0233 - accuracy: 0.9860 - val_loss: 0.7545 - val_accuracy: 0.8175\n",
            "Epoch 14/50\n",
            "16/16 [==============================] - 0s 20ms/step - loss: 0.0171 - accuracy: 0.9920 - val_loss: 0.6985 - val_accuracy: 0.8333\n",
            "Epoch 15/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0197 - accuracy: 0.9900 - val_loss: 0.7494 - val_accuracy: 0.8333\n",
            "Epoch 16/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0209 - accuracy: 0.9860 - val_loss: 0.6928 - val_accuracy: 0.8413\n",
            "Epoch 17/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0259 - accuracy: 0.9840 - val_loss: 0.7387 - val_accuracy: 0.8413\n",
            "Epoch 18/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0186 - accuracy: 0.9900 - val_loss: 0.6941 - val_accuracy: 0.8413\n",
            "Epoch 19/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0225 - accuracy: 0.9820 - val_loss: 0.6789 - val_accuracy: 0.8413\n",
            "Epoch 20/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0202 - accuracy: 0.9880 - val_loss: 0.7648 - val_accuracy: 0.8254\n",
            "Epoch 21/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0192 - accuracy: 0.9920 - val_loss: 0.7596 - val_accuracy: 0.8413\n",
            "Epoch 22/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0175 - accuracy: 0.9860 - val_loss: 0.7163 - val_accuracy: 0.8492\n",
            "Epoch 23/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0163 - accuracy: 0.9960 - val_loss: 0.7696 - val_accuracy: 0.8333\n",
            "Epoch 24/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0199 - accuracy: 0.9900 - val_loss: 0.7424 - val_accuracy: 0.8492\n",
            "Epoch 25/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0239 - accuracy: 0.9860 - val_loss: 0.7040 - val_accuracy: 0.8254\n",
            "Epoch 26/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0221 - accuracy: 0.9820 - val_loss: 0.7472 - val_accuracy: 0.8254\n",
            "Epoch 27/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0232 - accuracy: 0.9840 - val_loss: 0.6879 - val_accuracy: 0.8492\n",
            "Epoch 28/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0223 - accuracy: 0.9860 - val_loss: 0.6983 - val_accuracy: 0.8254\n",
            "Epoch 29/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0188 - accuracy: 0.9900 - val_loss: 0.6840 - val_accuracy: 0.8571\n",
            "Epoch 30/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0172 - accuracy: 0.9920 - val_loss: 0.7136 - val_accuracy: 0.8571\n",
            "Epoch 31/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0182 - accuracy: 0.9880 - val_loss: 0.7226 - val_accuracy: 0.8413\n",
            "Epoch 32/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0208 - accuracy: 0.9860 - val_loss: 0.7019 - val_accuracy: 0.8413\n",
            "Epoch 33/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0250 - accuracy: 0.9820 - val_loss: 0.7737 - val_accuracy: 0.8333\n",
            "Epoch 34/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0192 - accuracy: 0.9900 - val_loss: 0.7067 - val_accuracy: 0.8571\n",
            "Epoch 35/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0185 - accuracy: 0.9880 - val_loss: 0.7096 - val_accuracy: 0.8413\n",
            "Epoch 36/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0189 - accuracy: 0.9820 - val_loss: 0.7435 - val_accuracy: 0.8413\n",
            "Epoch 37/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0171 - accuracy: 0.9940 - val_loss: 0.8293 - val_accuracy: 0.8254\n",
            "Epoch 38/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0194 - accuracy: 0.9840 - val_loss: 0.7439 - val_accuracy: 0.8413\n",
            "Epoch 39/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0176 - accuracy: 0.9900 - val_loss: 0.7508 - val_accuracy: 0.8492\n",
            "Epoch 40/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0221 - accuracy: 0.9840 - val_loss: 0.7958 - val_accuracy: 0.8333\n",
            "Epoch 41/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0180 - accuracy: 0.9860 - val_loss: 0.7905 - val_accuracy: 0.8413\n",
            "Epoch 42/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0197 - accuracy: 0.9860 - val_loss: 0.7996 - val_accuracy: 0.8254\n",
            "Epoch 43/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0199 - accuracy: 0.9860 - val_loss: 0.7424 - val_accuracy: 0.8571\n",
            "Epoch 44/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0169 - accuracy: 0.9920 - val_loss: 0.7600 - val_accuracy: 0.8492\n",
            "Epoch 45/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0193 - accuracy: 0.9880 - val_loss: 0.7489 - val_accuracy: 0.8333\n",
            "Epoch 46/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0205 - accuracy: 0.9840 - val_loss: 0.7379 - val_accuracy: 0.8492\n",
            "Epoch 47/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0159 - accuracy: 0.9920 - val_loss: 0.7668 - val_accuracy: 0.8571\n",
            "Epoch 48/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0158 - accuracy: 0.9940 - val_loss: 0.7929 - val_accuracy: 0.8571\n",
            "Epoch 49/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0167 - accuracy: 0.9900 - val_loss: 0.8028 - val_accuracy: 0.8492\n",
            "Epoch 50/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0181 - accuracy: 0.9880 - val_loss: 0.8019 - val_accuracy: 0.8492\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TQrDjDJpvnkP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}